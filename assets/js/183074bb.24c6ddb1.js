"use strict";(self.webpackChunkcopper_docusaurus=self.webpackChunkcopper_docusaurus||[]).push([[3008],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var p=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);n&&(p=p.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,p)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,p,r=function(e,n){if(null==e)return{};var t,p,r={},a=Object.keys(e);for(p=0;p<a.length;p++)t=a[p],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(p=0;p<a.length;p++)t=a[p],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=p.createContext({}),c=function(e){var n=p.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=c(e.components);return p.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return p.createElement(p.Fragment,{},n)}},u=p.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,g=u["".concat(l,".").concat(d)]||u[d]||s[d]||a;return t?p.createElement(g,o(o({ref:n},m),{},{components:t})):p.createElement(g,o({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return p.createElement.apply(null,o)}return p.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4932:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var p=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],i={},l="Key Mapping",c={unversionedId:"sdk/core/mapping",id:"sdk/core/mapping",isDocsHomePage:!1,title:"Key Mapping",description:"API from CpcCore 1.8.0 (package mapping)",source:"@site/docs/sdk/core/mapping.md",sourceDirName:"sdk/core",slug:"/sdk/core/mapping",permalink:"/CopperDoc/docs/sdk/core/mapping",editUrl:"https://github.com/Coppernic/coppernic.github.io/docs/sdk/core/mapping.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HDK for C-One",permalink:"/CopperDoc/docs/sdk/core/hdk_cone"},next:{title:"Power",permalink:"/CopperDoc/docs/sdk/core/power"}},m=[{value:"API from CpcCore 1.8.0 (package <code>mapping</code>)",id:"api-from-cpccore-180-package-mapping",children:[{value:"Get a <code>Mapper</code> object",id:"get-a-mapper-object",children:[]},{value:"Mapping",id:"mapping",children:[]},{value:"Special Case for Barcode",id:"special-case-for-barcode",children:[]}]}],s={toc:m};function u(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,p.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"key-mapping"},"Key Mapping"),(0,a.kt)("h2",{id:"api-from-cpccore-180-package-mapping"},"API from CpcCore 1.8.0 (package ",(0,a.kt)("inlineCode",{parentName:"h2"},"mapping"),")"),(0,a.kt)("p",null,"This API is made to work on all Coppernic's products (Currently C-One, C-five and C-One\xb2), and on all OS.\nBut you have to keep in mind that this API uses different internal API under the hood that can have some limitations."),(0,a.kt)("p",null,"For instance, to get the actual mapping value on C-five, you need to have at least the OS version v20180709."),(0,a.kt)("p",null,"This API is fully implemented on:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"C-five OS v20180928"),(0,a.kt)("li",{parentName:"ul"},"C-One\xb2 OS v20180907")),(0,a.kt)("p",null,"All other OS and C-One are also supported but it may have some limitation. Please test API you need and contact ",(0,a.kt)("a",{parentName:"p",href:"mailto://support@coppernic.fr"},"Coppernic Support")," if you need help."),(0,a.kt)("h3",{id:"get-a-mapper-object"},"Get a ",(0,a.kt)("inlineCode",{parentName:"h3"},"Mapper")," object"),(0,a.kt)("p",null,"First thing to do is getting a ",(0,a.kt)("inlineCode",{parentName:"p"},"Mapper")," object. A connection to a service is needed so getting a reference is done in an asynchronous manner. RxJava is here to help:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Mapper.Factory.getKeyMapperSingle(context)\n                 .subscribe(new DisposableSingleObserver<Mapper>() {\n\n            @Override\n            public void onSuccess(Mapper km) {\n                // you can store a reference for a later use\n                mapper = km;\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                // Handle the error here\n            }\n        });\n")),(0,a.kt)("h3",{id:"mapping"},"Mapping"),(0,a.kt)("h4",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import fr.coppernic.sdk.mapping.Mapper;\nimport fr.coppernic.sdk.mapping.Mapper.MappingType;\nimport fr.coppernic.sdk.mapping.utils.MapperUtils;\n\nimport static fr.coppernic.sdk.mapping.Mapper.ProgKey.P1;\nimport static fr.coppernic.sdk.mapping.Mapper.ProgKey.P2;\nimport static fr.coppernic.sdk.mapping.Mapper.ProgKey.P3;\n")),(0,a.kt)("h4",{id:"prog-keys"},"Prog keys"),(0,a.kt)("p",null,"Programmable keys values are defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"Mapper.ProgKey")," enum."),(0,a.kt)("h4",{id:"api"},"API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Remove mapping for button 1\nmapper.remove(P1);\n// Remove mapping for button 2\nmapper.remove(P2);\n// Remove mapping for button 3\nmapper.remove(P3);\n\n// Remove all mapping\nmapper.removeAll();\n\n// Map a key\nmapper.mapKey(P1, KeyEvent.KEYCODE_1);\nmapper.mapKey(P2, KeyEvent.KEYCODE_2);\nmapper.mapKey(P3, KeyEvent.KEYCODE_3);\n\n// Get current mapping\nassertThat(mapper.getKeyMapping(P1), is(KeyEvent.KEYCODE_1));\nassertThat(mapper.getKeyMapping(P2), is(KeyEvent.KEYCODE_2));\nassertThat(mapper.getKeyMapping(P3), is(KeyEvent.KEYCODE_3));\nassertThat(mapper.getMappingType(P1), is(MappingType.KEY));\nassertThat(mapper.getMappingType(P2), is(MappingType.KEY));\nassertThat(mapper.getMappingType(P3), is(MappingType.KEY));\n\n// Map P1 to BARCODE_SCAN\nmapper.mapKey(P1, MapperUtils.getBarcodeMappingKeyCode());\n\n// Map a shortcut\nmapper.mapShortcut(P1, context, "com.google.android.youtube");\nassertThat(mapper.getShortcutMapping(P1), is("com.google.android.youtube"));\nassertThat(mapper.getMappingType(P1), is(MappingType.SHORTCUT));\n\n//When you are done with mapper object\nmapper.close();\n')),(0,a.kt)("h3",{id:"special-case-for-barcode"},"Special Case for Barcode"),(0,a.kt)("h4",{id:"c-one"},"C-One\xb2"),(0,a.kt)("p",null,"API is stable from OS v20180907"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Map a key to BARCODE_SCAN: ",(0,a.kt)("inlineCode",{parentName:"li"},"mapper.mapKey(P1, MapperUtils.getBarcodeMappingKeyCode())")),(0,a.kt)("li",{parentName:"ul"},"Get the BARCODE_SCAN value: ",(0,a.kt)("inlineCode",{parentName:"li"},"assertThat(mapper.getKeyMapping(P1), is(MapperUtils.getBarcodeMappingKeyCode()));"))),(0,a.kt)("h4",{id:"c-five"},"C-five"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OS v20171117:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mapper.getKeyMapping()")," is not working well."))),(0,a.kt)("li",{parentName:"ul"},"OS v20180709:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Map a key to BARCODE_SCAN: ",(0,a.kt)("inlineCode",{parentName:"li"},"mapper.mapKey(P1, 293)")),(0,a.kt)("li",{parentName:"ul"},"Get the BARCODE_SCAN value: ",(0,a.kt)("inlineCode",{parentName:"li"},"assertThat(mapper.getKeyMapping(P1), is(KeyEvent.KEYCODE_BUTTON_MODE));")))),(0,a.kt)("li",{parentName:"ul"},"OS v20180928",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Map a key to BARCODE_SCAN: ",(0,a.kt)("inlineCode",{parentName:"li"},"mapper.mapKey(P1, MapperUtils.getBarcodeMappingKeyCode())")),(0,a.kt)("li",{parentName:"ul"},"Get the BARCODE_SCAN value: ",(0,a.kt)("inlineCode",{parentName:"li"},"assertThat(mapper.getKeyMapping(P1), is(MapperUtils.getBarcodeMappingKeyCode()));"))))))}u.isMDXComponent=!0}}]);